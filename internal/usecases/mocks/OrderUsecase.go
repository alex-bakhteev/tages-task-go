	// Code generated by mockery v2.49.1. DO NOT EDIT.

	package mocks

	import (
		context "context"

		mock "github.com/stretchr/testify/mock"

		modelsuc "tages-task-go/internal/models/modelsuc"
	)

	// OrderUsecase is an autogenerated mock type for the OrderUsecase type
	type OrderUsecase struct {
		mock.Mock
	}

	// CreateOrder provides a mock function with given fields: ctx, order
	func (_m *OrderUsecase) CreateOrder(ctx context.Context, order modelsuc.OrderUC) error {
		ret := _m.Called(ctx, order)

		if len(ret) == 0 {
			panic("no return value specified for CreateOrder")
		}

		var r0 error
		if rf, ok := ret.Get(0).(func(context.Context, modelsuc.OrderUC) error); ok {
			r0 = rf(ctx, order)
		} else {
			r0 = ret.Error(0)
		}

		return r0
	}

	// GetAllOrders provides a mock function with given fields: ctx
	func (_m *OrderUsecase) GetAllOrders(ctx context.Context) ([]modelsuc.OrderUC, error) {
		ret := _m.Called(ctx)

		if len(ret) == 0 {
			panic("no return value specified for GetAllOrders")
		}

		var r0 []modelsuc.OrderUC
		var r1 error
		if rf, ok := ret.Get(0).(func(context.Context) ([]modelsuc.OrderUC, error)); ok {
			return rf(ctx)
		}
		if rf, ok := ret.Get(0).(func(context.Context) []modelsuc.OrderUC); ok {
			r0 = rf(ctx)
		} else {
			if ret.Get(0) != nil {
				r0 = ret.Get(0).([]modelsuc.OrderUC)
			}
		}

		if rf, ok := ret.Get(1).(func(context.Context) error); ok {
			r1 = rf(ctx)
		} else {
			r1 = ret.Error(1)
		}

		return r0, r1
	}

	// GetOrder provides a mock function with given fields: ctx, id
	func (_m *OrderUsecase) GetOrder(ctx context.Context, id int) (modelsuc.OrderUC, error) {
		ret := _m.Called(ctx, id)

		if len(ret) == 0 {
			panic("no return value specified for GetOrder")
		}

		var r0 modelsuc.OrderUC
		var r1 error
		if rf, ok := ret.Get(0).(func(context.Context, int) (modelsuc.OrderUC, error)); ok {
			return rf(ctx, id)
		}
		if rf, ok := ret.Get(0).(func(context.Context, int) modelsuc.OrderUC); ok {
			r0 = rf(ctx, id)
		} else {
			r0 = ret.Get(0).(modelsuc.OrderUC)
		}

		if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
			r1 = rf(ctx, id)
		} else {
			r1 = ret.Error(1)
		}

		return r0, r1
	}

	// NewOrderUsecase creates a new instance of OrderUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
	// The first argument is typically a *testing.T value.
	func NewOrderUsecase(t interface {
		mock.TestingT
		Cleanup(func())
	}) *OrderUsecase {
		mock := &OrderUsecase{}
		mock.Mock.Test(t)

		t.Cleanup(func() { mock.AssertExpectations(t) })

		return mock
	}
